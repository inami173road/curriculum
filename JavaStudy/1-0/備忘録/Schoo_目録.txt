第3回 Thymeleafで動的画面の構築
    HTMLとJavaを連携するためのlib(わざわざJSPで書かなくてもよい)
    JSPの代わり
    SchooSample19
        ログイン機能の実装
    SchooSample19-1
    SchooSample19-2
    SchooSample19-3
    SchooSample19-4

        セッション
            一連の処理の始まりから終わりまでを表す概念

        スコープ
            データを取り扱うことができる範囲

            アプリケーション
                アプリケーション起動中は有効
                サーバが再起動された破棄される
            リクエスト
                レスポンスが返されるまでは有効
            セッション
                リクエストしたクライアント単位で使用できる範囲
                クライアント毎（ブラウザごと）にデータを格納できる
                セッション破棄またはタイムアウトされるまでは有効




第4回 JPAを使ったデータベース処理の構築
    SchooSample20-1
        DBから値を持ってきて表示
        JavaからDBに接続して値を表示するだけ
    SchooSample20-2
        DBから値を持ってきて表示
        違うSLECT文での抽出
    SchooSample20
        リダイレクト
            → 操作したら画面が更新されるようにする。
        一つのページで値の追加、削除、表示をしている。

第5回 Springフレームワークの責務と機能
    SchooSample21-1
        入力した値のリターン
            正しい値と誤った値をチェックして返すだけ
    SchooSample21-2
        FormクラスとEntityクラスの違い
        → 同じように見えるが使い方が違うので分けている（責務）
    SchooSample21-3
        インスタンス化したものはシングルトンだが、
        ＠Serviceをつけたアノテーションで切り替えられる
        Serviceクラスの切り替え
    SchooSample21
        中身はほぼ同じだが、FormクラスとDBに登録するクラス(Entity)は違うので分ける。

第6回 AOPを使ってフレームワークの責務
    Spring AOP
    → ログ出力のためのFW
    SchooSample22-1
        各メソッドにSystem.out.plintln();をいれてからのコンソール出力
    SchooSample22-2
        逐一記述するのは手間なのでログ出力用のクラスを用意する。具体的には以下の二つ。
            ・build.gradleファイルへ設定の追記
            dependencies {
	            implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
                implementation 'org.springframework.boot:spring-boot-starter-validation'
                implementation 'org.springframework.boot:spring-boot-starter-web'

                implementation 'org.springframework.boot:spring-boot-starter-aop'
                //この一文を追記

                compileOnly 'org.projectlombok:lombok'
                developmentOnly 'org.springframework.boot:spring-boot-devtools'
                annotationProcessor 'org.projectlombok:lombok'
                testImplementation 'org.springframework.boot:spring-boot-starter-test'
            }
            ・aopパッケージMessageUtilメソッドにコンソールに出力する内容を記述する
    SchooSample22
        任意に箇所のAOPクラスの実装

第7回 JUnitを使った単体テスト
    単体テストについてはプロジェクト作成時点で入れる機能はない
    数ある単体テストの一つに過ぎない（他にもパターンはある）
    SchooSample23-1
        加算と徐算のテスト
        テスト用のフォルダを作ってそこでテスト用のクラスを作成する
    SchooSample23
        入力内容のテスト        

第8回 Webアプリケーションの設計
    ・設計の仕方を学ぶ
    ・整理の順番
        ①機能から「画面」を考える。
            図形ツールや手書きなどで機能に合わせた画面のだいたいのデザインを考える。
        ②その画面に必要な「要素」は何か？
            画面から要素となる項目を列挙する。
            共通項目や重複している部分をまとめる。
            役割を定義する
        ③画面間の「制御」を考える。
            Springでのクラスに対してどの役割なのかを振り分ける
            Controllerクラス：画面遷移用のクラス

第9回 Webアプリケーションの構築
        ・DBの作成
            CREATE DATABASE event_management;
            SHOW DATABASES;
            USE event_management;
        ・イベントテーブルの作成
            CREATE TABLE event(
                event_id INTEGER AUTO_INCREMENT,
                event_date date,    
                event_name VARCHAR(255),
                event_venue VARCHAR(255),
                PRIMARY KEY(event_id)
            );
            SHOW TABLES;
            DESC event;
        ・参加者テーブルの作成
            CREATE TABLE participant(
                participant_id INTEGER AUTO_INCREMENT,
                participant_name VARCHAR(255),
                PRIMARY KEY(participant_id)
            );
            SHOW TABLES;
            DESC participant;
        ・イベント参加テーブルの作成
            CREATE TABLE event_entry(
                event_entry_id INTEGER AUTO_INCREMENT,
                event_id INTEGER,
                participant_id INTEGER,
                PRIMARY KEY(event_entry_id)
            );
            SHOW TABLES;
            DESC event_entry;

第10回 Webアプリケーションテスト
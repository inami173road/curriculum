第3回 Thymeleafで動的画面の構築
    HTMLとJavaを連携するためのlib(わざわざJSPで書かなくてもよい)
    SchooSample19
        ログイン機能の実装
    SchooSample19-1
    SchooSample19-2
    SchooSample19-3
    SchooSample19-4

第4回 JPAを使ったデータベース処理の構築
    SchooSample20-1
        DBから値を持ってきて表示
        JavaからDBに接続して値を表示するだけ
    SchooSample20-2
        DBから値を持ってきて表示
        違うSLECT文での抽出
    SchooSample20
        リダイレクト
            → 操作したら画面が更新されるようにする。
        値の追加と削除
        更新したら表示する

第5回 Springフレームワークの責務と機能
    SchooSample21-1
        入力した値のリターン
            正しい値と誤った値をチェックして返すだけ
    SchooSample21-2
        FormクラスとEntityクラスの違い
        → 同じように見えるが使い方が違うので分けている（責務）
    SchooSample21-3
        インスタンス化したものはシングルトンだが、
        ＠Serviceをつけたアノテーションで切り替えられる
        Serviceクラスの切り替え
    SchooSample21
        FormとDBに登録する情報は違うので分ける。

第6回 AOPを使ってフレームワークの責務
    Spring AOP
    → ログ出力のためのFW
    SchooSample22-1
        各メソッドにSystem.out.plintln();をいれてからのコンソール出力
    SchooSample22-2
        逐一記述するのは手間なのでログ出力用のクラスを用意する。具体的には以下の二つ。
            ・build.gradleファイルへ設定の追記
            dependencies {
	            implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
                implementation 'org.springframework.boot:spring-boot-starter-validation'
                implementation 'org.springframework.boot:spring-boot-starter-web'

                implementation 'org.springframework.boot:spring-boot-starter-aop'
                //この一文を追記

                compileOnly 'org.projectlombok:lombok'
                developmentOnly 'org.springframework.boot:spring-boot-devtools'
                annotationProcessor 'org.projectlombok:lombok'
                testImplementation 'org.springframework.boot:spring-boot-starter-test'
            }
            ・aopパッケージMessageUtilメソッドにコンソールに出力する内容を記述する
    SchooSample22
        任意に箇所のAOPクラスの実装


第7回 JUnitを使った単体テスト

第8回 Webアプリケーションの設計

第9回 Webアプリケーションの構築

第10回 Webアプリケーションテスト
Step1：例外処理の種類
	Javaにおける例外処理は主に以下の3つ。
	それぞれ明確な使用目的と使用タイミングがある。
		①検査例外：Exception
		②実行時例外：RuntimeException
		③エラー：Error

	①検査例外：Exception		
        コンパイル言語はソースコードをコンパイルし、コンピュータが理解できる形式に変換する。	
        コード上に文法の誤りがある場合は、コンパイル時点でエラーが出力され実行できない。
        int number = "1";  のようなコンパイルエラー。
            検査例外は以下。
                ・java.io.IOException
                    ファイルやネットワーク等の入出力中エラー
                ・java.sql.SQLException
                    データベースアクセス中に発生したエラー
                上記2つを継承している場合は、以下のいずれかの対応が必要。
                    ・実装時点で処理に対して catch する。
                    ・メソッド内に記述した場合であれば、当該メソッドに throws 節を記述し上位の処理へ例外を投げる。

	②実行時例外：RuntimeException
        中にはコンパイル時にはエラーがなく実行途中に起きるエラー がある。
        例えば、あるファイルを開こうとしたが、そのファイルが存在しなかったなどの場合。
        コンパイル時点ではファイルがあるかどうかはチェックされないが、
        実際にプログラムを実行してみたらあるはずのファイルが無い場合もあり得る。
        プログラムは、そのファイルを開こうとしたが無かったため処理が止まる。
        ただし、例外処理を記述することによって以下のことが可能。
			・「処理を止めるプログラム」をそのまま動かす。
			・ファイルが未存在である旨を示すメッセージを表示する。

	③エラー：Error 	システムの動作を継続できないようなプログラム中で最も致命的なエラー になる。
        この場合はプログラマー側が何か対処をすることはなく、発生時にJavaがプログラムを強制終了する。
        例として有名な検査例外は以下に。
            ・java.lang.OutOfMemoryError
                主にJavaで使うメモリ容量が不足している場合に発生。
                このエラーが発生した場合は、Javaのあらゆる機能は使用できずコンソールへのログ出力すらできていない可能性がある。
                このような場合のエラーは捕捉する必要がないため早急にプログラムが終了される。


Step2：処理の流れ
	例外処理は、以下の3つのブロックで構成される。
	・try
		例外が発生する可能性のある処理を記述する。
		Javaの標準APIにおいては予め例外処理の発生する可能性のあるメソッドに対しては、
		throws ◯◯Exception 
		と定義されている。
	・catch
		発生した例外をキャッチする。
		複数記述することが可能（同じ例外クラスを重複して記述することは不可） 
		発生する例外によって対策処理を分ける場合などに有効。
		また、発生した例外がどんな内容の例外であるかをコンソールログへ出力するといった使い方が多い。
		通常の処理の道程に加え、例外もログ出力することで保守体制を整えます。
		他には、例外の情報を一時的に保持しておいてfinally へ処理が移行した際に、その保持していた内容を使用して何かの処理を実行するなど。
	・finally
		例外発生の有無に関わらず実行される。
		finally に関しては、 必須ではない。
		しかし、例外の発生有無に関わらず確実に処理を実行するため、
		〆となる終了処理を追加したい場合は必要に応じて実装する場合もある。

	try catch により、OSで確保される資源を消費する処理（ストリームやデータベース接続処理など）が捕捉されている場合は、
	確実にその使用リソースを開放する必要があるため、そのような場合に使用されます。
	また、例外の内容を捕捉した上で、最終的な処理の実行結果のメッセージを表示する、といったケースで使用することも可能。


Step3 :throw・throws
	・throw
		意図的に例外を発生させる機能 。
		メソッド内の処理で throw を記述。
		その場合、メソッド内には「例外」が発生するため
		「例外処理（tryブロック、catchブロック、finallyブロック）」
		または、
		 throws を記述し対応する必要がある。

	・throws
		「例外を投げる可能性がある」 メソッドに対して記述。
		メソッド内の処理中に、前述の throw を含む処理を実装していることが前提。
		通常、throw されている場合は  try-catch  により例外を捕捉し対応するが、
		 例外の発生有無に関わらず、「例外処理」を行わないようにする場合は、メソッドに throws 宣言 を記述する。

		例外処理を実装するとコード量が増える。例外処理は突き詰めるとか多くのコード記述する必要がある。
		不必要な例外処理は極力避け可読性の高いコードとなる方が好まれる。

		自身（例外がthrowされるメソッド）より上位の処理（呼び出し元）で例外を捕捉することで処理が簡潔になり、
		同じような例外処理が発生するメソッドが複数存在した場合でも、
		例外処理が必要な箇所を絞り込んだ対応ができるため、 throws が使用される傾向が高い。
